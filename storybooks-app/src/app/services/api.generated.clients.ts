/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const BASE_URL = new InjectionToken<string>('BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class CampaignApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    listAll(): Observable<CampaignListItemDto[]> {
        let url_ = this.baseUrl + "/api/campaigns";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListAll(<any>response_);
                } catch (e) {
                    return <Observable<CampaignListItemDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignListItemDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListAll(response: HttpResponseBase): Observable<CampaignListItemDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CampaignListItemDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignListItemDto[]>(<any>null);
    }

    create(updateDto: CampaignUpdateDto): Observable<CampaignDto> {
        let url_ = this.baseUrl + "/api/campaigns";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<CampaignDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<CampaignDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignDto>(<any>null);
    }

    get(id: string): Observable<CampaignDto> {
        let url_ = this.baseUrl + "/api/campaigns/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<CampaignDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CampaignDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CampaignDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CampaignDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CampaignDto>(<any>null);
    }

    update(id: string, updateDto: CampaignUpdateDto): Observable<void> {
        let url_ = this.baseUrl + "/api/campaigns/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    listScenarios(campaignId: string): Observable<ScenarioDto[]> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/scenarios";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListScenarios(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListScenarios(<any>response_);
                } catch (e) {
                    return <Observable<ScenarioDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<ScenarioDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processListScenarios(response: HttpResponseBase): Observable<ScenarioDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScenarioDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScenarioDto[]>(<any>null);
    }

    createScenario(campaignId: string, scenario: ScenarioUpdateDto): Observable<ScenarioDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/scenarios";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(scenario);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateScenario(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateScenario(<any>response_);
                } catch (e) {
                    return <Observable<ScenarioDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ScenarioDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateScenario(response: HttpResponseBase): Observable<ScenarioDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScenarioDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScenarioDto>(<any>null);
    }

    updateScenario(campaignId: string, scenarioId: string, scenario: ScenarioUpdateDto): Observable<ScenarioDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/scenarios/{scenarioId}";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (scenarioId === undefined || scenarioId === null)
            throw new Error("The parameter 'scenarioId' must be defined.");
        url_ = url_.replace("{scenarioId}", encodeURIComponent("" + scenarioId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(scenario);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateScenario(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateScenario(<any>response_);
                } catch (e) {
                    return <Observable<ScenarioDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ScenarioDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateScenario(response: HttpResponseBase): Observable<ScenarioDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ScenarioDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ScenarioDto>(<any>null);
    }

    deleteScenario(campaignId: string, scenarioId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/scenarios/{scenarioId}";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (scenarioId === undefined || scenarioId === null)
            throw new Error("The parameter 'scenarioId' must be defined.");
        url_ = url_.replace("{scenarioId}", encodeURIComponent("" + scenarioId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteScenario(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteScenario(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteScenario(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class CharacterApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    findAll(campaignId: string): Observable<CharacterDto[]> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/characters";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFindAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFindAll(<any>response_);
                } catch (e) {
                    return <Observable<CharacterDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<CharacterDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processFindAll(response: HttpResponseBase): Observable<CharacterDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CharacterDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CharacterDto[]>(<any>null);
    }

    create(campaignId: string, updateDto: CharacterUpdateDto): Observable<CharacterDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/characters";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<CharacterDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CharacterDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<CharacterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CharacterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CharacterDto>(<any>null);
    }

    update(campaignId: string, actorId: string, updateDto: CharacterUpdateDto): Observable<CharacterDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/characters/{actorId}";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (actorId === undefined || actorId === null)
            throw new Error("The parameter 'actorId' must be defined.");
        url_ = url_.replace("{actorId}", encodeURIComponent("" + actorId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<CharacterDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CharacterDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CharacterDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CharacterDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CharacterDto>(<any>null);
    }

    delete(campaignId: string, actorId: string): Observable<void> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/characters/{actorId}";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (actorId === undefined || actorId === null)
            throw new Error("The parameter 'actorId' must be defined.");
        url_ = url_.replace("{actorId}", encodeURIComponent("" + actorId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class UserProfileApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    ensureCreated(): Observable<UserProfileDto> {
        let url_ = this.baseUrl + "/api/user-profiles/current";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEnsureCreated(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEnsureCreated(<any>response_);
                } catch (e) {
                    return <Observable<UserProfileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserProfileDto>><any>_observableThrow(response_);
        }));
    }

    protected processEnsureCreated(response: HttpResponseBase): Observable<UserProfileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserProfileDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserProfileDto>(<any>null);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DocumentLibApiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    uploadAndCreate(campaignId: string, files: FileParameter[], label: string | null): Observable<MediaDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/media/upload?";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (label === undefined)
            throw new Error("The parameter 'label' must be defined.");
        else if(label !== null)
            url_ += "label=" + encodeURIComponent("" + label) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files === null || files === undefined)
            throw new Error("The parameter 'files' cannot be null.");
        else
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadAndCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadAndCreate(<any>response_);
                } catch (e) {
                    return <Observable<MediaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MediaDto>><any>_observableThrow(response_);
        }));
    }

    protected processUploadAndCreate(response: HttpResponseBase): Observable<MediaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MediaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MediaDto>(<any>null);
    }

    uploadAndReplace(campaignId: string, mediaId: string, files: FileParameter[], label: string | null): Observable<MediaDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/media/{mediaId}/upload?";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (mediaId === undefined || mediaId === null)
            throw new Error("The parameter 'mediaId' must be defined.");
        url_ = url_.replace("{mediaId}", encodeURIComponent("" + mediaId));
        if (label === undefined)
            throw new Error("The parameter 'label' must be defined.");
        else if(label !== null)
            url_ += "label=" + encodeURIComponent("" + label) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (files === null || files === undefined)
            throw new Error("The parameter 'files' cannot be null.");
        else
            files.forEach(item_ => content_.append("files", item_.data, item_.fileName ? item_.fileName : "files") );

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadAndReplace(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadAndReplace(<any>response_);
                } catch (e) {
                    return <Observable<MediaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MediaDto>><any>_observableThrow(response_);
        }));
    }

    protected processUploadAndReplace(response: HttpResponseBase): Observable<MediaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MediaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MediaDto>(<any>null);
    }

    create(campaignId: string, externalUri: string, label: string | null): Observable<MediaDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/media?";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (externalUri === undefined || externalUri === null)
            throw new Error("The parameter 'externalUri' must be defined and cannot be null.");
        else
            url_ += "externalUri=" + encodeURIComponent("" + externalUri) + "&";
        if (label === undefined)
            throw new Error("The parameter 'label' must be defined.");
        else if(label !== null)
            url_ += "label=" + encodeURIComponent("" + label) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<MediaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MediaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<MediaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MediaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MediaDto>(<any>null);
    }

    list(campaignId: string): Observable<MediaDto[]> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/media";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(<any>response_);
                } catch (e) {
                    return <Observable<MediaDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<MediaDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processList(response: HttpResponseBase): Observable<MediaDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MediaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MediaDto[]>(<any>null);
    }

    update(campaignId: string, mediaId: string, externalUri: string, label: string | null): Observable<MediaDto> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/media/{mediaId}?";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (mediaId === undefined || mediaId === null)
            throw new Error("The parameter 'mediaId' must be defined.");
        url_ = url_.replace("{mediaId}", encodeURIComponent("" + mediaId));
        if (externalUri === undefined || externalUri === null)
            throw new Error("The parameter 'externalUri' must be defined and cannot be null.");
        else
            url_ += "externalUri=" + encodeURIComponent("" + externalUri) + "&";
        if (label === undefined)
            throw new Error("The parameter 'label' must be defined.");
        else if(label !== null)
            url_ += "label=" + encodeURIComponent("" + label) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<MediaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<MediaDto>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<MediaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MediaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<MediaDto>(<any>null);
    }

    download(campaignId: string, mediaId: string): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/campaigns/{campaignId}/media/{mediaId}/download";
        if (campaignId === undefined || campaignId === null)
            throw new Error("The parameter 'campaignId' must be defined.");
        url_ = url_.replace("{campaignId}", encodeURIComponent("" + campaignId));
        if (mediaId === undefined || mediaId === null)
            throw new Error("The parameter 'mediaId' must be defined.");
        url_ = url_.replace("{mediaId}", encodeURIComponent("" + mediaId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownload(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownload(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processDownload(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export class CampaignListItemDto implements ICampaignListItemDto {
    id!: string;
    partitionKey!: string;
    name!: string;
    status!: CampaignStatus;
    creationDate!: Date;
    modificationDate!: Date;

    constructor(data?: ICampaignListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.partitionKey = _data["partitionKey"] !== undefined ? _data["partitionKey"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>null;
            this.modificationDate = _data["modificationDate"] ? new Date(_data["modificationDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): CampaignListItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["partitionKey"] = this.partitionKey !== undefined ? this.partitionKey : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>null;
        return data; 
    }
}

export interface ICampaignListItemDto {
    id: string;
    partitionKey: string;
    name: string;
    status: CampaignStatus;
    creationDate: Date;
    modificationDate: Date;
}

export enum CampaignStatus {
    InProgress = "InProgress",
}

export class CampaignDto implements ICampaignDto {
    id!: string;
    name!: string;
    status!: CampaignStatus;
    creationDate!: Date;
    modificationDate!: Date;

    constructor(data?: ICampaignDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>null;
            this.modificationDate = _data["modificationDate"] ? new Date(_data["modificationDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): CampaignDto {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>null;
        return data; 
    }
}

export interface ICampaignDto {
    id: string;
    name: string;
    status: CampaignStatus;
    creationDate: Date;
    modificationDate: Date;
}

export class CampaignUpdateDto implements ICampaignUpdateDto {
    name!: string;

    constructor(data?: ICampaignUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): CampaignUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CampaignUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ICampaignUpdateDto {
    name: string;
}

export class ScenarioDto implements IScenarioDto {
    id!: string;
    creationDate!: Date;
    title!: string;
    markdown!: string;

    constructor(data?: IScenarioDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.markdown = _data["markdown"] !== undefined ? _data["markdown"] : <any>null;
        }
    }

    static fromJS(data: any): ScenarioDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScenarioDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["markdown"] = this.markdown !== undefined ? this.markdown : <any>null;
        return data; 
    }
}

export interface IScenarioDto {
    id: string;
    creationDate: Date;
    title: string;
    markdown: string;
}

export class ScenarioUpdateDto implements IScenarioUpdateDto {
    title!: string;
    markdown!: string;

    constructor(data?: IScenarioUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.markdown = _data["markdown"] !== undefined ? _data["markdown"] : <any>null;
        }
    }

    static fromJS(data: any): ScenarioUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScenarioUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["markdown"] = this.markdown !== undefined ? this.markdown : <any>null;
        return data; 
    }
}

export interface IScenarioUpdateDto {
    title: string;
    markdown: string;
}

export abstract class AbstractActorDto implements IAbstractActorDto {
    id!: string;
    campaignId!: string;
    name!: string;
    descriptionMarkdown!: string;
    creationDate!: Date;
    modificationDate!: Date;
    type!: string;
    portraitMediaId?: string | null;

    constructor(data?: IAbstractActorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.campaignId = _data["campaignId"] !== undefined ? _data["campaignId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.descriptionMarkdown = _data["descriptionMarkdown"] !== undefined ? _data["descriptionMarkdown"] : <any>null;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>null;
            this.modificationDate = _data["modificationDate"] ? new Date(_data["modificationDate"].toString()) : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.portraitMediaId = _data["portraitMediaId"] !== undefined ? _data["portraitMediaId"] : <any>null;
        }
    }

    static fromJS(data: any): AbstractActorDto {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'AbstractActorDto' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["campaignId"] = this.campaignId !== undefined ? this.campaignId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["descriptionMarkdown"] = this.descriptionMarkdown !== undefined ? this.descriptionMarkdown : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["portraitMediaId"] = this.portraitMediaId !== undefined ? this.portraitMediaId : <any>null;
        return data; 
    }
}

export interface IAbstractActorDto {
    id: string;
    campaignId: string;
    name: string;
    descriptionMarkdown: string;
    creationDate: Date;
    modificationDate: Date;
    type: string;
    portraitMediaId?: string | null;
}

export class CharacterDto extends AbstractActorDto implements ICharacterDto {

    constructor(data?: ICharacterDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CharacterDto {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICharacterDto extends IAbstractActorDto {
}

export class AbstractActorUpdateDto implements IAbstractActorUpdateDto {
    name!: string;
    descriptionMarkdown!: string;
    portraitMediaId?: string | null;

    constructor(data?: IAbstractActorUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.descriptionMarkdown = _data["descriptionMarkdown"] !== undefined ? _data["descriptionMarkdown"] : <any>null;
            this.portraitMediaId = _data["portraitMediaId"] !== undefined ? _data["portraitMediaId"] : <any>null;
        }
    }

    static fromJS(data: any): AbstractActorUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbstractActorUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["descriptionMarkdown"] = this.descriptionMarkdown !== undefined ? this.descriptionMarkdown : <any>null;
        data["portraitMediaId"] = this.portraitMediaId !== undefined ? this.portraitMediaId : <any>null;
        return data; 
    }
}

export interface IAbstractActorUpdateDto {
    name: string;
    descriptionMarkdown: string;
    portraitMediaId?: string | null;
}

export class CharacterUpdateDto extends AbstractActorUpdateDto implements ICharacterUpdateDto {

    constructor(data?: ICharacterUpdateDto) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CharacterUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CharacterUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface ICharacterUpdateDto extends IAbstractActorUpdateDto {
}

export class UserProfileDto implements IUserProfileDto {
    id!: string;
    issuer!: string;
    subjectId!: string;
    email!: string;
    lastName!: string;
    firstName!: string;
    campaignIds!: string[];

    constructor(data?: IUserProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.campaignIds = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.issuer = _data["issuer"] !== undefined ? _data["issuer"] : <any>null;
            this.subjectId = _data["subjectId"] !== undefined ? _data["subjectId"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            if (Array.isArray(_data["campaignIds"])) {
                this.campaignIds = [] as any;
                for (let item of _data["campaignIds"])
                    this.campaignIds!.push(item);
            }
            else {
                this.campaignIds = <any>null;
            }
        }
    }

    static fromJS(data: any): UserProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["issuer"] = this.issuer !== undefined ? this.issuer : <any>null;
        data["subjectId"] = this.subjectId !== undefined ? this.subjectId : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        if (Array.isArray(this.campaignIds)) {
            data["campaignIds"] = [];
            for (let item of this.campaignIds)
                data["campaignIds"].push(item);
        }
        return data; 
    }
}

export interface IUserProfileDto {
    id: string;
    issuer: string;
    subjectId: string;
    email: string;
    lastName: string;
    firstName: string;
    campaignIds: string[];
}

export class MediaDto implements IMediaDto {
    id!: string;
    campaignId!: string;
    storageType!: MediaStorageType;
    externalUri?: string | null;
    documentId?: string | null;
    label?: string | null;
    filename?: string | null;
    contentType?: string | null;
    creationDate!: Date;
    modificationDate!: Date;

    constructor(data?: IMediaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.campaignId = _data["campaignId"] !== undefined ? _data["campaignId"] : <any>null;
            this.storageType = _data["storageType"] !== undefined ? _data["storageType"] : <any>null;
            this.externalUri = _data["externalUri"] !== undefined ? _data["externalUri"] : <any>null;
            this.documentId = _data["documentId"] !== undefined ? _data["documentId"] : <any>null;
            this.label = _data["label"] !== undefined ? _data["label"] : <any>null;
            this.filename = _data["filename"] !== undefined ? _data["filename"] : <any>null;
            this.contentType = _data["contentType"] !== undefined ? _data["contentType"] : <any>null;
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>null;
            this.modificationDate = _data["modificationDate"] ? new Date(_data["modificationDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): MediaDto {
        data = typeof data === 'object' ? data : {};
        let result = new MediaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["campaignId"] = this.campaignId !== undefined ? this.campaignId : <any>null;
        data["storageType"] = this.storageType !== undefined ? this.storageType : <any>null;
        data["externalUri"] = this.externalUri !== undefined ? this.externalUri : <any>null;
        data["documentId"] = this.documentId !== undefined ? this.documentId : <any>null;
        data["label"] = this.label !== undefined ? this.label : <any>null;
        data["filename"] = this.filename !== undefined ? this.filename : <any>null;
        data["contentType"] = this.contentType !== undefined ? this.contentType : <any>null;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>null;
        data["modificationDate"] = this.modificationDate ? this.modificationDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IMediaDto {
    id: string;
    campaignId: string;
    storageType: MediaStorageType;
    externalUri?: string | null;
    documentId?: string | null;
    label?: string | null;
    filename?: string | null;
    contentType?: string | null;
    creationDate: Date;
    modificationDate: Date;
}

export enum MediaStorageType {
    ExternalUri = "ExternalUri",
    Document = "Document",
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}